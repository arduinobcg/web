services:
  backend:
    depends_on:
      - database
      - message_queue
    build: 
      context: ./web-backend
      dockerfile: web-backend/Dockerfile
    environment:
      MONGODB_URI: "mongodb://database:27017/?replicaSet=rs0"
    ports:
      - "8082:80"
      - "8443:443"
  frontend:
    build: 
      context: ./web-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
  database:
    image: mongo
    volumes:
      - ../db/:/data/db:rw
    ports:
      - "8081:8081"
      - "27017:27017"
    command: mongod -replSet "rs0"
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 5
  message_queue:
    image: rabbitmq:3-management
    ports:
      - "8080:8080"
      - "15672:15672"
      - "1883:1883"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - ./enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080"]
        interval: 30s
        timeout: 10s
        retries: 5
#  mongoinit:
#    image: mongo
#    # this container will exit after executing the command
#    restart: "no"
#    depends_on:
#      database:
#        condition: service_healthy
#    command: >
#      mongosh <
#      '
#      db = (new Mongo("database:27017")).getDB("test");
#      config = {
#      "_id" : "miyako",
#      "members" : [
#        {
#          "_id" : 0,
#          "host" : "database:27017"
#        },
#      ]
#      };
#      rs.initiate(config);
#      '
