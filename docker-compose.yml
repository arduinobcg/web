services:
  backend:
    depends_on:
      - database
      - message_queue
    build: 
      context: ./web-backend
      dockerfile: web-backend/Dockerfile
    environment:
      MONGODB_URI: "mongodb://database:27017/?replicaSet=rs0"
    ports:
      - "8080:80"
      - "8443:443"
  frontend:
    build: 
      context: ./web-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
  database:
    image: mongo
    volumes:
      - ../db/:/data/db:rw
    ports:
      - "8081:8081"
      - "27017:27017"
  message_queue:
    image: rabbitmq:3-management
    ports:
      - "8080:8080"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
  mongoinit:
    image: mongo
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - database
    command: >
      mongo --host database:27017 --eval 
      '
      db = (new Mongo("localhost:27017")).getDB("test");
      config = {
      "_id" : "miyako",
      "members" : [
        {
          "_id" : 0,
          "host" : "database:27017"
        },
      ]
      };
      rs.initiate(config);
      '      